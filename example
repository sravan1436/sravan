import sys
from datetime import datetime as dt

from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.utils import getResolvedOptions
from pyspark.sql import SparkSession, SQLContext
from pyspark.sql import Window
from pyspark.sql import functions as F
from pyspark.sql.functions import to_date, lit, dense_rank, desc, expr, concat_ws, col
from pyspark.sql.types import StringType, StructType, StructField


from agreroleviewetl import config_init, join_km42_km43, result_set_akar_join, pit_ent_agre, pit_ent_agre_role
import pytest
import pandas as pd
import conftest


@pytest.fixture()
def spark():
    spark = SparkSession.builder \
        .appName("agreindex") \
        .config('spark.debug.maxToStringFields', 2000) \
        .config("spark.serializer", "org.apache.spark.serializer.KryoSerializer") \
        .getOrCreate()
    spark._jsc.hadoopConfiguration().set("fs.s3.canned.acl", "BucketOwnerFullControl")
    glue_context = GlueContext(spark.sparkContext)
    spark = glue_context.spark_session

    return spark


@pytest.fixture()
def sql_context(spark):
    sql_context = SQLContext(spark)

    return sql_context


@pytest.fixture
def input_akar_dataframe(sql_context):
    akar_df = sql_context.createDataFrame(
        [('1', '9999-99-99 99:99:99.999', '9999-99-99 99:99:99.999', '9999-99-99 99:99:99.999', 'L'),
        ('2', '9999-99-99 99:99:99.999', '9999-99-99 99:99:99.999', '9999-99-99 99:99:99.999', 'L'),
        ('3', '9999-99-99 99:99:99.999', '9999-99-99 99:99:99.999', '9999-99-99 99:99:99.999', 'L')],
        ['agre_index_id', 'akar_sys_updt_tmprl_tstmp', 'akar_sys_end_tmprl_tstmp', 'akar_sys_extrt_tstmp', 'BUSN_LINE_CD'],
    )

    return akar_df

@pytest.fixture
def input_km42_dataframe(sql_context):
    km42_df = sql_context.createDataFrame(
        [('1', 'A', '', '9999-99-99 99:99:99.999', '9999-99-99 99:99:99.999', '1'),
        ('2', 'B', '', '9999-99-99 99:99:99.999', '9999-99-99 99:99:99.999', '1'),
        ('3', 'C', '', '9999-99-99 99:99:99.999', '9999-99-99 99:99:99.999', '1')],
        ['agre_index_id_km42', 'apa_clnt_agre_id', 'apa_car_num', 'apa_sys_upsrt_tstmp', 'apa_sys_extrt_tstmp', 'rank'],
    )

    return km42_df

@pytest.fixture
def input_km43_dataframe(sql_context):
    km43_df = sql_context.createDataFrame(
        [('A', 'PNI', 'X', '9999-99-99', 'null', 'U'),
        ('B', 'PNI', 'Y', '9999-99-99', 'null', 'U'),
        ('C', 'PNI', 'Z', '9999-99-99', 'null', 'U')],
        ['agre_role_clnt_agre_id', 'clnt_agre_role_cd', 'CLNT_ID', 'ROLE_EFF_DT', 'ROLE_END_DT', 'agre_role_chng_type_cd'],
    )

    return km43_df


def get_sorted_data_frame(data_frame):
    columns_list = list(data_frame.columns)
    return data_frame.sort_values(columns_list).reset_index(drop=True)

# test 1
@pytest.mark.dependency()
def test_join_km42_km43(sql_context, input_km42_dataframe, input_km43_dataframe):
    actual_km42_km43_join_df = join_km42_km43(input_km42_dataframe, input_km43_dataframe)
    actual_km42_km43_join_pd_df = get_sorted_data_frame(actual_km42_km43_join_df.toPandas())

    expected_km42_km43_join_df = sql_context.createDataFrame(
        [('A', 'PNI', 'X', '9999-99-99', 'null', 'U', '1', 'A', '', '9999-99-99 99:99:99.999', '9999-99-99 99:99:99.999', '1'),
        ('B', 'PNI', 'Y', '9999-99-99', 'null', 'U', '2', 'B', '', '9999-99-99 99:99:99.999', '9999-99-99 99:99:99.999', '1'),
        ('C', 'PNI', 'Z', '9999-99-99', 'null', 'U','3', 'C', '', '9999-99-99 99:99:99.999', '9999-99-99 99:99:99.999', '1')],
        ['agre_role_clnt_agre_id', 'clnt_agre_role_cd', 'CLNT_ID', 'ROLE_EFF_DT', 'ROLE_END_DT', 'agre_role_chng_type_cd', 'agre_index_id_km42', 'apa_clnt_agre_id', 'apa_car_num', 'apa_sys_upsrt_tstmp', 'apa_sys_extrt_tstmp', 'rank'],
    )
    expected_km42_km43_join_pd_df = get_sorted_data_frame(expected_km42_km43_join_df.toPandas())

    # Equality assertion km42 and km43
    pd.testing.assert_frame_equal(
        expected_km42_km43_join_pd_df,
        actual_km42_km43_join_pd_df,
        check_like=True,
    )
    conftest.dataframe = actual_km42_km43_join_df

# test 2
@pytest.mark.dependency(depends=['test_join_km42_km43'])
def test_result_set_akar_join(sql_context, input_akar_dataframe):
    test_join_km42_km43 = conftest.dataframe
    actual_result_set_akar_join_df = result_set_akar_join(test_join_km42_km43, input_akar_dataframe)
    actual_result_set_akar_join_pd_df = get_sorted_data_frame(actual_result_set_akar_join_df.toPandas())

    expected_result_set_akar_join_df = sql_context.createDataFrame(
        [('1', 'PNI', 'X', '9999-99-99', 'null', 'L', 'U','','9999-99-99 99:99:99.999'),
        ('2', 'PNI', 'Y', '9999-99-99', 'null', 'L', 'U','','9999-99-99 99:99:99.999'),
        ('3', 'PNI', 'Z', '9999-99-99', 'null', 'L', 'U','','9999-99-99 99:99:99.999')],
        ['agre_index_id', 'clnt_agre_role_cd', 'CLNT_ID', 'ROLE_EFF_DT', 'ROLE_END_DT', 'BUSN_LINE_CD', 'agre_role_chng_type_cd','apa_car_num','apa_sys_upsrt_tstmp'],
    )
    expected_result_set_akar_join_pd_df = get_sorted_data_frame(expected_result_set_akar_join_df.toPandas())

    # Equality assertion result set akar
    pd.testing.assert_frame_equal(
        expected_result_set_akar_join_pd_df,
        actual_result_set_akar_join_pd_df,
        check_like=True,
    )
    conftest.dataframe = actual_result_set_akar_join_df

# # test 3
# def test_pit_ent_agre(sql_context, spark):
#     test_result_set_akar_join = conftest.dataframe
#     spark = spark
#     actual_pit_ent_agre_df = pit_ent_agre(test_result_set_akar_join)
#     actual_pit_ent_agre_pd_df = get_sorted_data_frame(actual_pit_ent_agre_df.toPandas())

#     expected_pit_ent_agre_df = sql_context.createDataFrame(
#         [('3', 'Life', 'U', 'None', 'null'),
#         ('1', 'Life', 'U', 'None', 'null'),
#         ('2', 'Life', 'U', 'None', 'null')],
#         ['agre_index_id', 'busn_line_nm', 'agre_role_chng_type_cd', 'prod_ctgry_nm', 'prod_nm'],
#     )
#     expected_pit_ent_agre_pd_df = get_sorted_data_frame(expected_pit_ent_agre_df.toPandas())

#         # Equality assertion result set akar
#     pd.testing.assert_frame_equal(
#         expected_pit_ent_agre_pd_df,
#         actual_pit_ent_agre_pd_df,
#         check_like=True,
#     )
#     conftest.dataframe = actual_pit_ent_agre_df
#     return(actual_pit_ent_agre_df)
    
