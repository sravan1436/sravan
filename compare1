include:
  - project: "dcs/gitlab-ci-templates"
    ref: v1.4.1
    file: "/semver/.all.yml"

stages:
  - version
  - validate
  - create-zip
  - deploy-test1
  - dependency-scan
  - static-scan
  - upload-eot
  - release
  - support_trigger
  - request-production

variables:
  CONFIG_REPO_ID: 90602
  R2D2_PRODUCT: sf.dcs.euioptimization
  GITLAB_TOKEN: $CD_PIPELINE_BOT_TOKEN
  GITLAB_API_URL: https://sfgitlab.opr.statefarm.org/api/v4
  GIT_AUTHOR_NAME: bot_dcsbld
  GIT_AUTHOR_EMAIL: DL-ET-DCS-DataMgmt-CB2.DLU57D@internal.statefarm.com
  GIT_COMMITTER_NAME: $GIT_AUTHOR_NAME
  GIT_COMMITTER_EMAIL: $GIT_AUTHOR_EMAIL
  DEPLOYMENT_NAME: "eui-common-pl"
  LAMBDA_REQ_FILE: "requirements.txt"
  TC_ARTIFACT_VERSION: "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
  PYTHON_GLUEJOB_SCIPT_LOC : "src/main/glue/"
  SUPPORT_TRIGGER_LOC: "src/main/support/"
  PYTHON_LAMBDA_SCIPT_LOC : "src/main/lambdas/"
  COMPONENT_DIR: scripts
  SUPPORT_DIR: support
  SUPPORT_FILE_NAME: "euiingestion-copyprefix-glue-support-test1_2020-11-25.copyglue"
  TC_SRC_DIST_NAME: "main"
  TC_LAMBDA_NAME1: "eui_cleanup_s3folder.py"
  TC_LAMBDA_NAME2: "eui_landing_s3_trigger.py"
  TC_LAMBDA_NAME3: "eui_lambda_crawler_trigger.py"
  TC_LAMBDA_NAME4: "eui_sns_lambda.py"
  TC_LAMBDA_NAME5:  "eui_lambda_glue_etl_trigger_support.py"
  TC_LAMBDA_NAME6:  "eui_lambda_glue_crawler_trigger_support.py"
  TC_LAMBDA_NAME7:  "eui_lambda_copyglue_trigger_support.py"
  TC_LAMBDA_NAME8:  "eui_cleanup_support_lambda.py"
  TC_LAMBDA_NAME9:  "eui_update_partition.py"
  TC_LAMBDA_NAME10:  "eui_rawcount_updater.py"
  TC_LAMBDA_NAME11:  "eui_inputdata_parser.py"
  TC_LAMBDA_NAME12: "eui_lambda_glue_trigger.py"
  TC_R2D2_COMPONENT: euiingestion-application-code

unit-test:
  stage: validate
  image: ${CI_REGISTRY}/registry/sfcommon/app-builder:${APP_BUILDER_VERSION}
  script:
    - pip3 install setuptools_scm
    - pip install -r $LAMBDA_REQ_FILE -t ./ # We must download all dependencies in current directory.
#    - pip install pytest moto coverage pytest-cov pytest-html
    - pip install pytest moto cryptography==3.3.1 coverage pytest-cov pytest-html
    - pytest --cov-report html --cov=tests/
  after_script:
    - mkdir -p euiingestion-application-code/coverage
    - cp -r htmlcov euiingestion-application-code/coverage
  artifacts:
    paths:
      - ./euiingestion-application-code/coverage/
  only:
    - master
#  when: manual
create_zip:
  stage: create-zip
  image: ${CI_REGISTRY}/registry/sfcommon/app-builder:${APP_BUILDER_VERSION}
  script:
    - chmod -R 755 .
    - for scriptname in $(find ./src/main/lambdas -type f \( -name "*.py" ! -name "__init__.py" \) -printf "%P\n") ; do
       echo "Creating ${scriptname}.zip ...";
       zip -r -j ${scriptname}.zip  src/main/lambdas/${scriptname}; done
  artifacts:
    paths:
      - ./*.py.zip
    expire_in: 1 week
  only:
    - master

.tc_deploy-template:
  image: ${CI_REGISTRY}/dcs/registry/terraform-deploy:0.12.20
  dependencies:
    - create_zip
  script:
    - aws lambda update-function-code
      --function-name $LAMBDA_FUNCTION_NAME1
      --zip-file fileb://${TC_LAMBDA_NAME1}.zip
      --publish
      --region us-east-1
      --profile $AWS_PROFILE

    - aws lambda update-function-code
      --function-name $LAMBDA_FUNCTION_NAME2
      --zip-file fileb://${TC_LAMBDA_NAME2}.zip
      --publish
      --region us-east-1
      --profile $AWS_PROFILE

    - aws lambda update-function-code
      --function-name $LAMBDA_FUNCTION_NAME3
      --zip-file fileb://${TC_LAMBDA_NAME3}.zip
      --publish
      --region us-east-1
      --profile $AWS_PROFILE

    - aws lambda update-function-code
      --function-name $LAMBDA_FUNCTION_NAME4
      --zip-file fileb://${TC_LAMBDA_NAME4}.zip
      --publish
      --region us-east-1
      --profile $AWS_PROFILE

    - aws lambda update-function-code
      --function-name $LAMBDA_FUNCTION_NAME5
      --zip-file fileb://${TC_LAMBDA_NAME5}.zip
      --publish
      --region us-east-1
      --profile $AWS_PROFILE

    - aws lambda update-function-code
      --function-name $LAMBDA_FUNCTION_NAME6
      --zip-file fileb://${TC_LAMBDA_NAME6}.zip
      --publish
      --region us-east-1
      --profile $AWS_PROFILE

    - aws lambda update-function-code
      --function-name $LAMBDA_FUNCTION_NAME7
      --zip-file fileb://${TC_LAMBDA_NAME7}.zip
      --publish
      --region us-east-1
      --profile $AWS_PROFILE

    - aws lambda update-function-code
      --function-name $LAMBDA_FUNCTION_NAME8
      --zip-file fileb://${TC_LAMBDA_NAME8}.zip
      --publish
      --region us-east-1
      --profile $AWS_PROFILE

    - aws lambda update-function-code
      --function-name $LAMBDA_FUNCTION_NAME9
      --zip-file fileb://${TC_LAMBDA_NAME9}.zip
      --publish
      --region us-east-1
      --profile $AWS_PROFILE

    - aws lambda update-function-code
      --function-name $LAMBDA_FUNCTION_NAME10
      --zip-file fileb://${TC_LAMBDA_NAME10}.zip
      --publish
      --region us-east-1
      --profile $AWS_PROFILE

    - aws lambda update-function-code
      --function-name $LAMBDA_FUNCTION_NAME11
      --zip-file fileb://${TC_LAMBDA_NAME11}.zip
      --publish
      --region us-east-1
      --profile $AWS_PROFILE

    - aws lambda update-function-code
      --function-name $LAMBDA_FUNCTION_NAME12
      --zip-file fileb://${TC_LAMBDA_NAME12}.zip
      --publish
      --region us-east-1
      --profile $AWS_PROFILE

    - aws s3 cp ${PYTHON_GLUEJOB_SCIPT_LOC} s3://sf-pcingest-test1-use1-euiingestion-intermediary/$COMPONENT_DIR/
      --recursive
      --exclude "__init__.py"
      --profile ${AWS_PROFILE}

  tags:
    - aws
  only:
    - master

tc_deploy-test1:
  stage: deploy-test1
  extends: .tc_deploy-template
  variables:
    lane: test1
    LAMBDA_FUNCTION_NAME1: euiingestion-cleanprefix-lambda-$lane
    LAMBDA_FUNCTION_NAME2: euiingestion-copyprefix-lambda-$lane
    LAMBDA_FUNCTION_NAME3: euiingestion-crawlertrigger-lambda-$lane
    LAMBDA_FUNCTION_NAME4: euiingestion-customsns-lambda-$lane
    LAMBDA_FUNCTION_NAME5: euiingestion-glue2trigger-support-$lane
    LAMBDA_FUNCTION_NAME6: euiingestion-crawlertrigger-support-$lane
    LAMBDA_FUNCTION_NAME7: euiingestion-copygluetrigger-support-$lane
    LAMBDA_FUNCTION_NAME8: euiingestion-cleanup-support-$lane
    LAMBDA_FUNCTION_NAME9: euiingestion-update-partition-lambda-$lane
    LAMBDA_FUNCTION_NAME10: euiingestion-rawRecordCount-updater-lambda-$lane
    LAMBDA_FUNCTION_NAME11: euiingestion-inputdata-parser-lambda-$lane
    LAMBDA_FUNCTION_NAME12: euiingestion-glueoptimization-job-trigger-lambda-$lane

    AWS_PROFILE: test

dependency_scan:
  stage: dependency-scan
  image: registry.sfgitlab.opr.statefarm.org/registry/sfcommunity/dependency-scanner:2.0.0
  script:
    - dependency-scanner scan
      -u $CD_PIPELINE_BOT
      -p $CD_PIPELINE_BOT_PASS_B2E
      -o $NIQS_ORG_ID
      -i $TC_SRC_DIST_NAME
      -n $TC_SRC_DIST_NAME-$CI_COMMIT_REF_NAME
      -a $LAMBDA_REQ_FILE
    - mkdir -p dependencyScan
    - mv niqs-scan.pdf dependencyScan/
  artifacts:
    paths:
      - ./dependencyScan
  only:
    - master

static_scan:
  stage: static-scan
  dependencies:
    - version
    - create_zip
  image: registry.sfgitlab.opr.statefarm.org/registry/sfcommunity/static-scanner:latest
  before_script:
    - cat RELEASE.env && source RELEASE.env
  script:
    - static-scanner
      -v $VERSION
      -u $CD_PIPELINE_BOT
      -p $CD_PIPELINE_BOT_PASS_B2E
      -t dat
      -n $TC_SRC_DIST_NAME-$CI_COMMIT_REF_NAME
      -a ./src/main/
    - mkdir -p staticScan
    - mv checkmarx-report.pdf staticScan/
  artifacts:
    paths:
      - ./staticScan
  only:
    - master

upload-eot:
  stage: upload-eot
  image: ${CI_REGISTRY}/r2d2/r2d2-cli:${R2D2_CLI_VERSION}
  dependencies:
    - version
    - dependency_scan
    - static_scan
    - unit-test
  before_script:
    - cat RELEASE.env && source RELEASE.env
    - EOT_REPO_URL=$(echo "https://sfgitlab.opr.statefarm.org/dcs/evidence-of-test/eui-common-pl-eot")
    - EOT_REPO=$(echo "${EOT_REPO_URL}.git")
    - echo $VERSION
  script:
    - mkdir -p euiingestion-application-code-eot
    - mv euiingestion-application-code/coverage euiingestion-application-code-eot/code-coverage-report 2>/dev/null || true
    - mv dependencyScan/niqs-scan.pdf euiingestion-application-code-eot/OpenSourceLicenseScan.pdf 2>/dev/null || true
    - mv staticScan/checkmarx-report.pdf euiingestion-application-code-eot/StaticScan.pdf 2>/dev/null || true
    - EOT_CONTENT="euiingestion-application-code-eot/code-coverage-report,euiingestion-application-code-eot/OpenSourceLicenseScan.pdf,euiingestion-application-code-eot/StaticScan.pdf"
    - r2d2 upload-eot
      --user $CD_PIPELINE_BOT
      --password $CD_PIPELINE_BOT_PASS_B2E
      --r2d2-user $CD_PIPELINE_BOT
      --r2d2-password $CD_PIPELINE_BOT_PASS_TP
      --product-name $TC_R2D2_PRODUCT
      -c --component-key $TC_R2D2_COMPONENT
      --git-url $EOT_REPO
      --upload "$EOT_CONTENT"
      --ver $VERSION
  only:
    - master

support_trigger:
  stage: support_trigger
  script:
    - aws s3 cp ${SUPPORT_TRIGGER_LOC}/$SUPPORT_FILE_NAME s3://sf-pcingest-test1-use1-euiingestion-intermediary/$SUPPORT_DIR/
      --profile test
  tags:
    - aws
  when: manual
request_production:
  stage: request-production
  image: ${CI_REGISTRY}/gitops/gitops-cli:latest
  dependencies:
    - version
    - create_zip
  before_script:
    - cat RELEASE.env
    - source RELEASE.env
  script:
    - DESCRIPTION=$(
      gitops generate-description
      --configuration-item "DCS-EUI-AWS"
      --evidence-of-test "https://sfgitlab.opr.statefarm.org/dcs/evidence-of-test/eui-common-pl-eot/-/tree/master/euiingestion-application-code/$VERSION"
      --source-change-url "$CI_PROJECT_URL/commit/$CI_COMMIT_SHA"
      )
    - gitops branch create
      --project-id $CONFIG_REPO_ID
      --name ${DEPLOYMENT_NAME}-${VERSION}
    - gitops commit create
      --project-id $CONFIG_REPO_ID
      --branch ${DEPLOYMENT_NAME}-${VERSION}
      --file ${PYTHON_GLUEJOB_SCIPT_LOC}
      --file ${PYTHON_LAMBDA_SCIPT_LOC}
      --file ${SUPPORT_TRIGGER_LOC}
      --file ${TC_LAMBDA_NAME1}.zip
      --file ${TC_LAMBDA_NAME2}.zip
      --file ${TC_LAMBDA_NAME3}.zip
      --file ${TC_LAMBDA_NAME4}.zip
      --file ${TC_LAMBDA_NAME5}.zip
      --file ${TC_LAMBDA_NAME6}.zip
      --file ${TC_LAMBDA_NAME7}.zip
      --file ${TC_LAMBDA_NAME8}.zip
      --file ${TC_LAMBDA_NAME9}.zip
      --file ${TC_LAMBDA_NAME10}.zip
      --file ${TC_LAMBDA_NAME11}.zip
      --message "Release ${DEPLOYMENT_NAME}-${VERSION} to production"
    - gitops merge-request create
      --project-id $CONFIG_REPO_ID
      --source-branch ${DEPLOYMENT_NAME}-${VERSION}
      --title "Release ${DEPLOYMENT_NAME}-${VERSION} to production"
      --description "$DESCRIPTION"
  only:
    - master
  when: manual
  
